/*
-------------------------------------------------------------------------------------------------
Filename:    ResourceManager.pch
-------------------------------------------------------------------------------------------------

This precompiled header file is part of the iMagiNext 2014 Solar Exploratorium Project.
   
   ResourceManager.pch contains a class with all of the resource-related protocols for our
   program. These include, setting up, loading and unloading of all resources groups such as
   plugins, meshes and other dlls.

-------------------------------------------------------------------------------------------------
*/

	// Header Guard
#ifndef RscMgr_h_
#define RscMgr_h_

#include "Defines.pch"

using namespace Ogre;


//-----------------------------------------------------------------------------------------------------------------
class ResourceLoader {
private:

public:
	ResourceLoader()	// Constructor
	{	}

	void setupResources(const String&) const;	// load all resource groups
	void initResources(int);					// initialise resource groups

	virtual ~ResourceLoader()	// Destructor
	{	}

};


//-----------------------------------------------------------------------------------------------------------------
void ResourceLoader::setupResources(const String& fResources) const
{
		// Load resource paths from config file
	ConfigFile cf;
	cf.load(fResources);
		// Iterator to go through all sections and settings in file
	ConfigFile::SectionIterator seci = cf.getSectionIterator();
 
	String secName, typeName, archName;
	while (seci.hasMoreElements())
	{
		secName = seci.peekNextKey();
		ConfigFile::SettingsMultiMap *settings = seci.getNext();
		ConfigFile::SettingsMultiMap::iterator i;
		for (i = settings->begin(); i != settings->end(); ++i)
		{
			typeName = i->first;
			archName = i->second;
			Ogre::ResourceGroupManager::getSingleton().addResourceLocation(
            archName, typeName, secName);
		}
	}

}


//-----------------------------------------------------------------------------------------------------------------
void ResourceLoader::initResources(const int MipMaps=5)
{
		// Set mipmap level (note: some APIs ignore this)
	TextureManager::getSingleton().setDefaultNumMipmaps(MipMaps);
		// initialise all resource groups
	ResourceGroupManager::getSingleton().initialiseAllResourceGroups();
}



#endif //endif ResourcesManager.pch header guard